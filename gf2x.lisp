(DEFUN gf2x+ (a b)
       (LOGXOR a b))
(DEFUN gf2x* (a b)
       (LET f ((a a) (b b) (total 0))
            (COND ((ZEROP b) total)
                  (T (f (LEFTSHIFT a 1)
                        (LEFTSHIFT b (MINUS 1))
                        (COND ((ONEP (LOGAND b 1)) (gf2x+ total a))
                              (T total)))))))
(DEFUN gf2xpretty (a)
    (LET f ((a a) (i 0) (ls ()))
         (COND ((ZEROP a) ls)
               (T (f (LEFTSHIFT a (MINUS 1))
                     (ADD1 i)
                     (COND ((ONEP (LOGAND a 1)) (CONS i ls))
                           (T ls)))))))
(DEFUN find-composite (lim)
    (LET f ((major 2) (minor 2) (prods ()))
         (COND ((EQUAL major lim) prods)
               ((NOT (MEMBER (gf2x* major minor) prods)) (f major minor (CONS (gf2x* major minor) prods)))
               ((EQUAL major minor) (f (ADD1 major) 2 prods))
               (T (f major (ADD1 minor) prods)))))
(DEFUN find-irreducible (lim)
    ((LAMBDA (prods)
             (LET f ((a 2) (ls ()))
                  (COND ((EQUAL a lim) ls)
                        ((MEMBER a prods) (f (ADD1 a) ls))
                        (T (f (ADD1 a) (CONS a ls))))))
     (find-composite lim)))
(CSETQ irred-order-5 (find-irreducible (LEFTSHIFT 1 6)))
(PRINT irred-order-5)
(PRINT (MAPLIST irred-order-5 '(LAMBDA (a) (gf2xpretty (CAR a)))))
